/* ========================================
	DX22Base/
	------------------------------------
	デバッグコンソール表示用cpp
	------------------------------------
	DebugConsole.cpp
========================================== */

// =============== インクルード ===================
#include "DebugConsole.h"
#include <Windows.h>	// AllocConsole, FreeConsole
#include <iostream>		// std::cout, std::endl


/* ========================================
	初期化関数
	-------------------------------------
	内容：コンソールを作成し、標準出力をリダイレクトする
=========================================== */
void DebugConsole::Init()  
{  
	AllocConsole();	// コンソール作成

	// 標準出力をリダイレクト
   if (freopen("CONOUT$", "w", stdout) == NULL) {  
       std::cerr << "標準出力のリダイレクトに失敗しました。" << std::endl;  
   }  

   // 標準エラーをリダイレクト
   if (freopen("CONOUT$", "w", stderr) == NULL) {  
       std::cerr << "標準エラーのリダイレクトに失敗しました。" << std::endl;  
   }  
   std::cout << "コンソールが作成されました！" << std::endl;  
}

void DebugConsole::Update()
{
	system("cls");
}

/* ========================================
	終了関数
	-------------------------------------
	内容：コンソールを閉じる
=========================================== */
void DebugConsole::Uninit()
{
	FreeConsole();	// コンソールを閉じる
}

/* ========================================
	文字列表示関数
	-------------------------------------
	内容：文字列を表示する
	-------------------------------------
	引数1：message	表示する文字列
=========================================== */
void DebugConsole::Print(const std::string message)
{
	std::cout << message << std::endl;
}


/* ========================================
	書式付き表示関数
	-------------------------------------
	内容：書式付きで文字列を表示する
	-------------------------------------
	引数1：format	表示する文字列の書式
	引数2：...		表示する文字列の引数
=========================================== */
void DebugConsole::Printf(const char* format, ...)
{
	va_list arg;	// 可変長引数リスト

	// 可変長引数リストの初期化
	va_start(arg, format);

	// 書式付きで文字列を表示
	vprintf(format, arg);

	// 可変長引数リストの終了
	va_end(arg);
	
	std::cout << std::endl;
}
